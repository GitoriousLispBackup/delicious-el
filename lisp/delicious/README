* License and Copying Information

`delicioapi.el' and `delicious.el' are Copyright (C) 2004 John Sullivan

Author: John Sullivan <john@wjsullivan.net>
Created 25 October 2004
Version: 0.1
Keywords: comm, hypermedia

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA.

* Documentation License

This README is Copyright 2004 by John Sullivan <john@wjsullivan.net>.

Verbatim copying and distribution of this entire article are permitted
worldwide, without royalty, in any medium, provided this notice is preserved.

* Contents of the archive

- delicioapi.el
- delicious.el
- ChangeLog
- README
- COPYING

* Overview

This is a complete set of functions for interacting with <http://del.icio.us>,
a "social bookmarking" project written and maintained by Joshua Shachter.

'delicioapi.el' contains the back-end functions that interact with the API,
behind the scenes. I have kept these in a separate file to make them available
for others to use in writing their own delicious applications, without being
required to load the commands that I have written.

'delicious.el' contains the front-end interactive functions and commands for
putting the API functions to productive use, via Emacs. 'delicioapi.el' must be
loaded for these functions to work. 

The del.icio.us API does go through frequent changes; I've made an effort here
to structure the code so that these changes can be easily accommodated.

The specifications for the API are at <http://del.icio.us/doc/api>.

* Getting started

First, you need to set up an account at del.icio.us, by visiting that site and
following the instructions there.

Then, you will need to put something like the following in your `.emacs'.

;; You don't need this first line if you just put both of the `.el' files in a
;; directory that is already in your load-path. C-h v <ret>load-path<ret> will
;; show you what directories are currently in your load-path.

(add-to-list 'load-path "/path/to/delicious-el/files")
(require 'delicious)
(setq delicious-api-user "myusername"
      delicious-api-password "mypassword"
      delicious-api-from "my@email.net")

There are some other options as well, but these three have to be set for the
program to work. You should use your e-mail address in `delicious-api-from',
because it is a polite thing to do. That way if your programs ever start doing
anything bonkers, del.icio.us will be able to contact you and let you know of
the problem.

Speaking of programs and bonkers, del.icio.us has requested that you limit your
hits to the API to a reasonable amount. In particular, it is requested that you
do not do anything that will trigger one hit to del.icio.us for every hit to
your web site. In order to respect that, this program does a number of things
(and will do more in the future) to cache information locally.

* Commands to Use and What to Expect

There is really only one useful command at the moment. 

- M-x delicious-post

This is the command to post a URL to your del.icio.us account. The first time
you execute this command in an Emacs session, delicious-el will fetch from the
server the list of tags you've used so far, and a complete list of all your
posts to date. You will then be prompted for information for the new post. The
only required information is the URL itself and a description. Everything else
is optional.

delicious-el will try to guess the URL that you want to enter. If there is a
URL under the cursor, it will suggest that. If there is no URL under the cursor
and you are in a w3m-el buffer, it will suggest the URL of the site you are
looking at. If neither of these two things are true, it will just put an
"http://" in the input line for you.

When prompted for tags, enter one at a time, hitting enter after each. You have
tab-completion available in typical Emacs style, based on all of the tags you
have used in the past. When you are done entering tags, just hit enter at the
prompt. 

delicious-el will attempt to guess an appropriate description. If you
are in a w3m-el buffer, delicious-el will suggest the title of the page being
viewed as a description. If you are looking at an article in gnus, it will
suggest the title of the article as a description. If you like the suggestion,
hit enter. If you don't, just erase it and type your own.

Extended Description is the next field, and it's all up to you. No guessing
attempts are made here.

Next is the Date/Time prompt. It's not pretty, and will be improved in the
future. If you don't enter anything here, the current date will be used. If you
do want to enter the date, the format is indicated in the prompt. An example
is: `2004-12-11T14:40:00Z'. Note that the `T' and `Z' are actually literal and
have to be included.

Once you enter the Date/Time and hit enter, the URL should be posted to the
server!

* Advanced use

- Binding commands to keys

The author uses this in his `.emacs' to bind `delicious-post' to <C-c p>. 

(global-set-key "\C-cp" 'delicious-post)

- Refreshing information from the server

In order to minimize calls to the server, this program will only fetch your
list of tags (for use in tag completion) and your list of posts (for duplicate
checking) once, the first time you use the delicious-post function. If you
really want to force a refresh of your tags list and posts list so that newer
tags are available for completion, evaluate:

(setq delicious-tags-list nil)

and/or:

(setq delicious-posts-list nil)

You should only do this if you have had your Emacs session open for a few hours
or more. Otherwise you are placing an unreasonable burden on the server. There
isn't much reason to refresh your post list anyway, because a list of new posts
is maintained locally for purposes of duplicate checking. Future improvements
will do this for tags as well.

* Problems

- HTTP errors

Currently, it is not uncommon for the del.icio.us server to be temporarily
unavailable. I'm working on better HTTP error-handling, so that the specific
error will be reported to you. There's some code here to do that now, but it
does not seem to be working well. The best solution to this currently is to
open <http://del.icio.us> in your browser and see what error is coming up. 

- Server timeouts

I implemented a timeout because I figured you probably didn't want your whole
Emacs session to be unusable for too long while waiting for an OK response from
the server. Depending on the speed of your connection and of the del.icio.us
server, you might want to use a higher number for `delicious-api-timeout'. The
default is 60 seconds. Note that when a connection times out, there is a good
chance that your transaction with del.icio.us still happened; delicious-el just
got tired of waiting. So you probably want to check with your browser and see
if that last post was actually received before you send it again. 

* Bugs

Please report any bugs or suggestions to me at <john@wjsullivan.net>. If enough
people are interested, perhaps we will open an area at
<http://www.emacswiki.org>.

